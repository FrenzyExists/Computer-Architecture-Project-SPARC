$date
	Sun Jun 11 07:06:23 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module phase3Tester $end
$var wire 5 ! rs2 [4:0] $end
$var wire 5 " rs1 [4:0] $end
$var wire 5 # rd [4:0] $end
$var wire 32 $ nPC4 [31:0] $end
$var wire 32 % nPC [31:0] $end
$var wire 32 & instruction_out [31:0] $end
$var wire 32 ' instruction [31:0] $end
$var wire 4 ( cond [3:0] $end
$var wire 1 ) WB_Register_File_Enable $end
$var wire 32 * WB_RD_out [31:0] $end
$var wire 5 + RD_WB [4:0] $end
$var wire 5 , RD_MEM [4:0] $end
$var wire 5 - RD_EX [4:0] $end
$var wire 32 . PC_MEM [31:0] $end
$var wire 32 / PC_ID [31:0] $end
$var wire 32 0 PC_EX [31:0] $end
$var wire 32 1 PC [31:0] $end
$var wire 3 2 OutputHandlerInstructions [2:0] $end
$var wire 2 3 MEM_CU [1:0] $end
$var wire 4 4 IS [3:0] $end
$var wire 1 5 ID_branch_instr $end
$var wire 22 6 ID_Imm22 [21:0] $end
$var wire 19 7 ID_CU [18:0] $end
$var wire 1 8 I29_branch_instr $end
$var wire 30 9 I29_0 [29:0] $end
$var wire 22 : EX_Imm22 [21:0] $end
$var wire 10 ; EX_CU [9:0] $end
$var wire 5 < DataMemInstructions [4:0] $end
$var wire 20 = CU_SIG [19:0] $end
$var wire 1 > CC_Enable $end
$var wire 4 ? ALU_OP [3:0] $end
$var reg 8 @ Addr [7:0] $end
$var reg 1 A LE $end
$var reg 5 B RD_ID [4:0] $end
$var reg 1 C S $end
$var reg 1 D clk $end
$var reg 1 E clr $end
$var reg 8 F data [7:0] $end
$var reg 1 G reset $end
$var integer 32 H code [31:0] $end
$var integer 32 I fi [31:0] $end
$scope module CU $end
$var wire 1 D clk $end
$var wire 1 E clr $end
$var wire 20 J instr_signals [19:0] $end
$var wire 32 K instr [31:0] $end
$var reg 1 L CC_Enable $end
$var reg 1 M I13 $end
$var reg 1 N I24 $end
$var reg 1 O I30 $end
$var reg 1 P I31 $end
$var reg 4 Q ID_ALU_OP_instr [3:0] $end
$var reg 1 R ID_branch_instr $end
$var reg 1 S ID_call_instr $end
$var reg 1 T ID_data_mem_Enable $end
$var reg 1 U ID_data_mem_RW $end
$var reg 1 V ID_data_mem_SE $end
$var reg 2 W ID_data_mem_Size [1:0] $end
$var reg 1 X ID_jmpl_instr $end
$var reg 1 Y ID_load_instr $end
$var reg 1 Z ID_register_file_Enable $end
$var reg 1 [ ID_store_instr $end
$var reg 2 \ instr_op [1:0] $end
$var reg 3 ] is_sethi [2:0] $end
$var reg 6 ^ op3 [5:0] $end
$upscope $end
$scope module CU_MUX $end
$var wire 1 C S $end
$var wire 20 _ cu_in_mux [19:0] $end
$var reg 19 ` CU_SIGNALS [18:0] $end
$var reg 1 5 ID_branch_instr_out $end
$upscope $end
$scope module EX_MEM $end
$var wire 32 a EX_ALU_OUT [31:0] $end
$var wire 1 D clk $end
$var wire 1 E clr $end
$var wire 32 b PC [31:0] $end
$var wire 10 c EX_control_unit_instr [9:0] $end
$var wire 5 d EX_RD_instr [4:0] $end
$var reg 5 e Data_Mem_instructions [4:0] $end
$var reg 32 f MEM_ALU_OUT [31:0] $end
$var reg 5 g MEM_RD_instr [4:0] $end
$var reg 2 h MEM_control_unit_instr [1:0] $end
$var reg 3 i Output_Handler_instructions [2:0] $end
$var reg 32 j PC_MEM [31:0] $end
$upscope $end
$scope module ID_EX $end
$var wire 32 k ID_MX1 [31:0] $end
$var wire 32 l ID_MX2 [31:0] $end
$var wire 32 m ID_MX3 [31:0] $end
$var wire 5 n ID_RD_instr [4:0] $end
$var wire 19 o ID_control_unit_instr [18:0] $end
$var wire 1 D clk $end
$var wire 1 E clr $end
$var wire 32 p PC [31:0] $end
$var wire 22 q Imm22 [21:0] $end
$var reg 4 r EX_ALU_OP_instr [3:0] $end
$var reg 1 > EX_CC_Enable_instr $end
$var reg 4 s EX_IS_instr [3:0] $end
$var reg 22 t EX_Imm22 [21:0] $end
$var reg 32 u EX_MX1 [31:0] $end
$var reg 32 v EX_MX2 [31:0] $end
$var reg 32 w EX_MX3 [31:0] $end
$var reg 5 x EX_RD_instr [4:0] $end
$var reg 10 y EX_control_unit_instr [9:0] $end
$var reg 32 z PC_EX [31:0] $end
$upscope $end
$scope module IF_ID $end
$var wire 1 A LE $end
$var wire 1 D clk $end
$var wire 1 E clr $end
$var wire 1 G reset $end
$var wire 32 { instruction [31:0] $end
$var wire 32 | PC [31:0] $end
$var reg 5 } I18_14 [4:0] $end
$var reg 22 ~ I21_0 [21:0] $end
$var reg 4 !" I28_25 [3:0] $end
$var reg 30 "" I29_0 [29:0] $end
$var reg 5 #" I29_25 [4:0] $end
$var reg 1 8 I29_branch_instr $end
$var reg 5 $" I4_0 [4:0] $end
$var reg 32 %" PC_ID_out [31:0] $end
$var reg 32 &" instruction_out [31:0] $end
$upscope $end
$scope module MEM_WB $end
$var wire 5 '" MEM_RD_instr [4:0] $end
$var wire 1 (" MEM_control_unit_instr $end
$var wire 32 )" MUX_out [31:0] $end
$var wire 1 D clk $end
$var wire 1 E clr $end
$var reg 5 *" WB_RD_instr [4:0] $end
$var reg 32 +" WB_RD_out [31:0] $end
$var reg 1 ) WB_Register_File_Enable $end
$upscope $end
$scope module PC_Reg $end
$var wire 1 A LE $end
$var wire 1 D clk $end
$var wire 1 E clr $end
$var wire 32 ," D [31:0] $end
$var reg 32 -" Q [31:0] $end
$upscope $end
$scope module adder $end
$var wire 32 ." PC_in [31:0] $end
$var reg 32 /" PC_out [31:0] $end
$upscope $end
$scope module nPC_Reg $end
$var wire 32 0" D [31:0] $end
$var wire 1 A LE $end
$var wire 1 D clk $end
$var wire 1 E clr $end
$var reg 32 1" Q [31:0] $end
$upscope $end
$scope module ram1 $end
$var wire 8 2" Address [7:0] $end
$var reg 32 3" DataOut [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx 3"
bx 2"
bx 1"
bx 0"
bx /"
bx ."
bx -"
bx ,"
bx +"
bx *"
bx )"
x("
bx '"
bx &"
bx %"
bx $"
bx #"
bx ""
bx !"
bx ~
bx }
bx |
bx {
bx z
bx y
bx x
bx w
bx v
bx u
bx t
bx s
bx r
bx q
bx p
bx o
b1011 n
bz m
bz l
bz k
bx j
bx i
bx h
bx g
bx f
bx e
bx d
bx c
bx b
bz a
bx `
bx _
bx ^
bx ]
bx \
x[
xZ
xY
xX
bx W
xV
xU
xT
xS
xR
bx Q
xP
xO
xN
xM
xL
bx K
bx J
b10000000000000000000000000000011 I
b1 H
1G
b11111110 F
1E
0D
0C
b1011 B
1A
b0 @
bx ?
x>
bx =
bx <
bx ;
bx :
bx 9
x8
bx 7
bx 6
x5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
x)
bx (
bx '
bx &
bx %
bx $
bx #
bx "
bx !
$end
#2
b0 7
b0 `
b0 o
05
b10001010000000000000000000000000 '
b10001010000000000000000000000000 {
b10001010000000000000000000000000 3"
b1000 $
b1000 /"
b1000 0"
b0 2"
0("
0M
0N
0O
0P
0L
b0 Q
b0 W
0T
0U
0V
0Z
0[
0Y
0R
0S
b0 =
b0 J
b0 _
0X
b100 %
b100 ,"
b100 ."
b100 1"
b0 1
b0 |
b0 -"
b0 /
b0 p
b0 %"
b0 &
b0 K
b0 &"
b0 (
b0 !"
b0 #
b0 #"
b0 !
b0 $"
b0 "
b0 }
08
b0 9
b0 ""
b0 6
b0 q
b0 ~
b0 w
b0 v
b0 u
b0 :
b0 t
0>
b0 -
b0 d
b0 x
b0 ;
b0 c
b0 y
b0 ?
b0 r
b0 4
b0 s
b0 0
b0 b
b0 z
b0 .
b0 j
b0 )"
b0 ,
b0 g
b0 '"
b0 3
b0 h
b0 2
b0 i
b0 <
b0 e
b0 f
0)
b0 *
b0 +"
b0 +
b0 *"
1D
#3
0E
0G
#4
0D
#6
b100000011000 7
b100000011000 `
b100000011000 o
1[
1Z
b100000011000 =
b100000011000 J
b100000011000 _
1P
b10000110101000001110000000000001 '
b10000110101000001110000000000001 {
b10000110101000001110000000000001 3"
b0 ^
b10 \
b100 2"
b1100 $
b1100 /"
b1100 0"
bz f
bz w
bz v
bz u
b1011 -
b1011 d
b1011 x
b10001010000000000000000000000000 &
b10001010000000000000000000000000 K
b10001010000000000000000000000000 &"
b101 (
b101 !"
b101 #
b101 #"
b1010000000000000000000000000 9
b1010000000000000000000000000 ""
b100 1
b100 |
b100 -"
b1000 %
b1000 ,"
b1000 ."
b1000 1"
1D
#8
0D
#10
b10100110000011000 7
b10100110000011000 `
b10100110000011000 o
1L
b10 Q
b10100110000011000 =
b10100110000011000 J
b10100110000011000 _
1M
b11000100000010000000000000000001 '
b11000100000010000000000000000001 {
b11000100000010000000000000000001 3"
b10000 $
b10000 /"
b10000 0"
b1000 2"
b10100 ^
b1100 %
b1100 ,"
b1100 ."
b1100 1"
b1000 1
b1000 |
b1000 -"
b100 /
b100 p
b100 %"
b10000110101000001110000000000001 &
b10000110101000001110000000000001 K
b10000110101000001110000000000001 &"
b11 (
b11 !"
b11 #
b11 #"
b1 !
b1 $"
b11 "
b11 }
b110101000001110000000000001 9
b110101000001110000000000001 ""
b1000001110000000000001 6
b1000001110000000000001 q
b1000001110000000000001 ~
b11000 ;
b11000 c
b11000 y
b1 4
b1 s
b1011 ,
b1011 g
b1011 '"
1D
#12
0D
#14
b1100010010100 7
b1100010010100 `
b1100010010100 o
0[
1Y
1T
b0 Q
0L
0M
b1100010010100 =
b1100010010100 J
b1100010010100 _
1O
b11001010001010000110000000000001 '
b11001010001010000110000000000001 {
b11001010001010000110000000000001 3"
1("
b1 ^
b11 \
b1100 2"
b10100 $
b10100 /"
b10100 0"
b1011 +
b1011 *"
b11 3
b11 h
b1000001110000000000001 :
b1000001110000000000001 t
1>
b10 ?
b10 r
b1001 4
b1001 s
b100 0
b100 b
b100 z
b1000 /
b1000 p
b1000 %"
b11000100000010000000000000000001 &
b11000100000010000000000000000001 K
b11000100000010000000000000000001 &"
b10 (
b10 !"
b10 #
b10 #"
b0 "
b0 }
b100000010000000000000000001 9
b100000010000000000000000001 ""
b10000000000000000001 6
b10000000000000000001 q
b10000000000000000001 ~
b1100 1
b1100 |
b1100 -"
b10000 %
b10000 ,"
b10000 ."
b10000 1"
1D
#16
0D
#18
b101100011000000 7
b101100011000000 `
b101100011000000 o
0Z
1U
0Y
b101100011000000 =
b101100011000000 J
b101100011000000 _
1M
b10010101111111111111111111110 '
b10010101111111111111111111110 {
b10010101111111111111111111110 3"
b11000 $
b11000 /"
b11000 0"
b10000 2"
b101 ^
b10100 %
b10100 ,"
b10100 ."
b10100 1"
b10000 1
b10000 |
b10000 -"
b1100 /
b1100 p
b1100 %"
b11001010001010000110000000000001 &
b11001010001010000110000000000001 K
b11001010001010000110000000000001 &"
b101 (
b101 !"
b101 #
b101 #"
b1 "
b1 }
b1010001010000110000000000001 9
b1010001010000110000000000001 ""
b1010000110000000000001 6
b1010000110000000000001 q
b1010000110000000000001 ~
b10000000000000000001 :
b10000000000000000001 t
0>
b10010100 ;
b10010100 c
b10010100 y
b0 ?
b0 r
b11 4
b11 s
b1000 0
b1000 b
b1000 z
b100 .
b100 j
b100 )"
1)
1D
#20
0D
#22
b100000000000000 7
b100000000000000 `
b100000000000000 o
15
1R
0T
0U
0O
b10000100000000000000 =
b10000100000000000000 J
b10000100000000000000 _
0P
b1011000011110000111100000110 '
b1011000011110000111100000110 {
b1011000011110000111100000110 3"
0("
b10 ]
b0 \
b10100 2"
b11100 $
b11100 /"
b11100 0"
b100 *
b100 +"
b1000 .
b1000 j
b1000 )"
b10 3
b10 h
b100 2
b100 i
b100 <
b100 e
b1010000110000000000001 :
b1010000110000000000001 t
b11000000 ;
b11000000 c
b11000000 y
b1011 4
b1011 s
b1100 0
b1100 b
b1100 z
b10000 /
b10000 p
b10000 %"
b10010101111111111111111111110 &
b10010101111111111111111111110 K
b10010101111111111111111111110 &"
b1001 (
b1001 !"
b1001 #
b1001 #"
b11110 !
b11110 $"
b11111 "
b11111 }
b10010101111111111111111111110 9
b10010101111111111111111111110 ""
b1111111111111111111110 6
b1111111111111111111110 q
b1111111111111111111110 ~
b10100 1
b10100 |
b10100 -"
b11000 %
b11000 ,"
b11000 ."
b11000 1"
1D
#24
0D
#26
b1110010000000010000 7
b1110010000000010000 `
b1110010000000010000 o
05
1Z
0R
b1110 Q
0M
b1110010000000010000 =
b1110010000000010000 J
b1110010000000010000 _
1N
b1000000000000000000000000000100 '
b1000000000000000000000000000100 {
b1000000000000000000000000000100 3"
b100000 $
b100000 /"
b100000 0"
b11000 2"
b100 ]
b11100 %
b11100 ,"
b11100 ."
b11100 1"
b11000 1
b11000 |
b11000 -"
b10100 /
b10100 p
b10100 %"
b1011000011110000111100000110 &
b1011000011110000111100000110 K
b1011000011110000111100000110 &"
b101 (
b101 !"
b101 #
b101 #"
b110 !
b110 $"
b11100 "
b11100 }
b1011000011110000111100000110 9
b1011000011110000111100000110 ""
b11110000111100000110 6
b11110000111100000110 q
b11110000111100000110 ~
b1111111111111111111110 :
b1111111111111111111110 t
b0 ;
b0 c
b0 y
b1000 4
b1000 s
b10000 0
b10000 b
b10000 z
b1100 .
b1100 j
b1100 )"
b0 3
b0 h
b0 2
b0 i
b110 <
b110 e
0)
b1000 *
b1000 +"
1D
#28
0D
#30
b1000000010010 7
b1000000010010 `
b1000000010010 o
b0 Q
1S
0N
b1000000010010 =
b1000000010010 J
b1000000010010 _
1O
b10000001110000000000000000001111 '
b10000001110000000000000000001111 {
b10000001110000000000000000001111 3"
b1 \
b11100 2"
b100100 $
b100100 /"
b100100 0"
b1100 *
b1100 +"
b10000 .
b10000 j
b10000 )"
b0 <
b0 e
b11110000111100000110 :
b11110000111100000110 t
b10000 ;
b10000 c
b10000 y
b1110 ?
b1110 r
b100 4
b100 s
b10100 0
b10100 b
b10100 z
b11000 /
b11000 p
b11000 %"
b1000000000000000000000000000100 &
b1000000000000000000000000000100 K
b1000000000000000000000000000100 &"
b0 (
b0 !"
b0 #
b0 #"
b100 !
b100 $"
b0 "
b0 }
b100 9
b100 ""
b100 6
b100 q
b100 ~
b11100 1
b11100 |
b11100 -"
b100000 %
b100000 ,"
b100000 ."
b100000 1"
1D
#32
0D
#33
1G
1E
#34
b0 7
b0 `
b0 o
0O
0Z
b0 =
b0 J
b0 _
0S
b10001010000000000000000000000000 '
b10001010000000000000000000000000 {
b10001010000000000000000000000000 3"
b1000 $
b1000 /"
b1000 0"
b0 2"
b100 %
b100 ,"
b100 ."
b100 1"
b0 1
b0 |
b0 -"
b0 /
b0 p
b0 %"
b0 &
b0 K
b0 &"
b0 !
b0 $"
b0 9
b0 ""
b0 6
b0 q
b0 ~
b0 w
b0 v
b0 u
b0 :
b0 t
b0 -
b0 d
b0 x
b0 ;
b0 c
b0 y
b0 ?
b0 r
b0 4
b0 s
b0 0
b0 b
b0 z
b0 .
b0 j
b0 )"
b0 ,
b0 g
b0 '"
b0 f
b0 *
b0 +"
b0 +
b0 *"
1D
#36
0D
#38
1D
#40
0D
1C
#42
1D
#44
0D
#46
1D
#48
0D
#50
1D
#52
0D
