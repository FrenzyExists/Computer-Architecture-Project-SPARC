$date
	Sat Jun  3 11:03:59 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module phase3Tester $end
$var wire 5 ! rs2 [4:0] $end
$var wire 5 " rs1 [4:0] $end
$var wire 5 # rd [4:0] $end
$var wire 32 $ nPC4 [31:0] $end
$var wire 32 % nPC [31:0] $end
$var wire 32 & instruction_out [31:0] $end
$var wire 32 ' instruction [31:0] $end
$var wire 4 ( cond [3:0] $end
$var wire 1 ) WB_Register_File_Enable $end
$var wire 32 * WB_RD_out [31:0] $end
$var wire 5 + RD_WB [4:0] $end
$var wire 5 , RD_MEM [4:0] $end
$var wire 5 - RD_EX [4:0] $end
$var wire 32 . PC_MEM [31:0] $end
$var wire 32 / PC_ID [31:0] $end
$var wire 32 0 PC_EX [31:0] $end
$var wire 32 1 PC [31:0] $end
$var wire 3 2 OutputHandlerInstructions [2:0] $end
$var wire 1 3 MEM_CU $end
$var wire 4 4 IS [3:0] $end
$var wire 1 5 ID_branch_instr $end
$var wire 22 6 ID_Imm22 [21:0] $end
$var wire 18 7 ID_CU [17:0] $end
$var wire 1 8 I29_branch_instr $end
$var wire 30 9 I29_0 [29:0] $end
$var wire 22 : EX_Imm22 [21:0] $end
$var wire 9 ; EX_CU [8:0] $end
$var wire 5 < DataMemInstructions [4:0] $end
$var wire 19 = CU_SIG [18:0] $end
$var wire 1 > CC_Enable $end
$var wire 4 ? ALU_OP [3:0] $end
$var reg 8 @ Addr [7:0] $end
$var reg 1 A LE $end
$var reg 5 B RD_ID [4:0] $end
$var reg 1 C S $end
$var reg 1 D clk $end
$var reg 1 E clr $end
$var reg 8 F data [7:0] $end
$var reg 1 G reset $end
$var integer 32 H code [31:0] $end
$var integer 32 I fi [31:0] $end
$scope module CU $end
$var wire 1 D clk $end
$var wire 1 E clr $end
$var wire 19 J instr_signals [18:0] $end
$var wire 32 K instr [31:0] $end
$var reg 1 L CC_Enable $end
$var reg 1 M I13 $end
$var reg 1 N I24 $end
$var reg 1 O I30 $end
$var reg 1 P I31 $end
$var reg 4 Q ID_ALU_OP_instr [3:0] $end
$var reg 1 R ID_branch_instr $end
$var reg 1 S ID_call_instr $end
$var reg 1 T ID_data_mem_Enable $end
$var reg 1 U ID_data_mem_RW $end
$var reg 1 V ID_data_mem_SE $end
$var reg 2 W ID_data_mem_Size [1:0] $end
$var reg 1 X ID_jmpl_instr $end
$var reg 1 Y ID_load_instr $end
$var reg 1 Z ID_register_file_Enable $end
$var reg 2 [ instr_op [1:0] $end
$var reg 3 \ is_sethi [2:0] $end
$var reg 6 ] op3 [5:0] $end
$upscope $end
$scope module CU_MUX $end
$var wire 1 C S $end
$var wire 19 ^ cu_in_mux [18:0] $end
$var reg 18 _ CU_SIGNALS [17:0] $end
$var reg 1 5 ID_branch_instr_out $end
$upscope $end
$scope module EX_MEM $end
$var wire 32 ` EX_ALU_OUT [31:0] $end
$var wire 1 D clk $end
$var wire 1 E clr $end
$var wire 32 a PC [31:0] $end
$var wire 9 b EX_control_unit_instr [8:0] $end
$var wire 5 c EX_RD_instr [4:0] $end
$var reg 5 d Data_Mem_instructions [4:0] $end
$var reg 32 e MEM_ALU_OUT [31:0] $end
$var reg 5 f MEM_RD_instr [4:0] $end
$var reg 1 3 MEM_control_unit_instr $end
$var reg 3 g Output_Handler_instructions [2:0] $end
$var reg 32 h PC_MEM [31:0] $end
$upscope $end
$scope module ID_EX $end
$var wire 32 i ID_MX1 [31:0] $end
$var wire 32 j ID_MX2 [31:0] $end
$var wire 32 k ID_MX3 [31:0] $end
$var wire 5 l ID_RD_instr [4:0] $end
$var wire 18 m ID_control_unit_instr [17:0] $end
$var wire 1 D clk $end
$var wire 1 E clr $end
$var wire 32 n PC [31:0] $end
$var wire 22 o Imm22 [21:0] $end
$var reg 4 p EX_ALU_OP_instr [3:0] $end
$var reg 1 > EX_CC_Enable_instr $end
$var reg 4 q EX_IS_instr [3:0] $end
$var reg 22 r EX_Imm22 [21:0] $end
$var reg 32 s EX_MX1 [31:0] $end
$var reg 32 t EX_MX2 [31:0] $end
$var reg 32 u EX_MX3 [31:0] $end
$var reg 5 v EX_RD_instr [4:0] $end
$var reg 9 w EX_control_unit_instr [8:0] $end
$var reg 32 x PC_EX [31:0] $end
$upscope $end
$scope module IF_ID $end
$var wire 1 A LE $end
$var wire 1 D clk $end
$var wire 1 E clr $end
$var wire 1 G reset $end
$var wire 32 y instruction [31:0] $end
$var wire 32 z PC [31:0] $end
$var reg 5 { I18_14 [4:0] $end
$var reg 22 | I21_0 [21:0] $end
$var reg 4 } I28_25 [3:0] $end
$var reg 30 ~ I29_0 [29:0] $end
$var reg 5 !" I29_25 [4:0] $end
$var reg 1 8 I29_branch_instr $end
$var reg 5 "" I4_0 [4:0] $end
$var reg 32 #" PC_ID_out [31:0] $end
$var reg 32 $" instruction_out [31:0] $end
$upscope $end
$scope module MEM_WB $end
$var wire 5 %" MEM_RD_instr [4:0] $end
$var wire 1 3 MEM_control_unit_instr $end
$var wire 32 &" MUX_out [31:0] $end
$var wire 1 D clk $end
$var wire 1 E clr $end
$var reg 5 '" WB_RD_instr [4:0] $end
$var reg 32 (" WB_RD_out [31:0] $end
$var reg 1 ) WB_Register_File_Enable $end
$upscope $end
$scope module PC_Reg $end
$var wire 1 A LE $end
$var wire 1 D clk $end
$var wire 1 E clr $end
$var wire 32 )" D [31:0] $end
$var reg 32 *" Q [31:0] $end
$upscope $end
$scope module adder $end
$var wire 32 +" PC_in [31:0] $end
$var reg 32 ," PC_out [31:0] $end
$upscope $end
$scope module nPC_Reg $end
$var wire 32 -" D [31:0] $end
$var wire 1 A LE $end
$var wire 1 D clk $end
$var wire 1 E clr $end
$var reg 32 ." Q [31:0] $end
$upscope $end
$scope module ram1 $end
$var wire 8 /" Address [7:0] $end
$var reg 32 0" DataOut [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx 0"
bx /"
bx ."
bx -"
bx ,"
bx +"
bx *"
bx )"
bx ("
bx '"
bx &"
bx %"
bx $"
bx #"
bx ""
bx !"
bx ~
bx }
bx |
bx {
bx z
bx y
bx x
bx w
bx v
bx u
bx t
bx s
bx r
bx q
bx p
bx o
bx n
bx m
b1011 l
bz k
bz j
bz i
bx h
bx g
bx f
bx e
bx d
bx c
bx b
bx a
bz `
bx _
bx ^
bx ]
bx \
bx [
xZ
xY
xX
bx W
xV
xU
xT
xS
xR
bx Q
xP
xO
xN
xM
xL
bx K
bx J
b10000000000000000000000000000011 I
b1 H
1G
b11111110 F
1E
0D
0C
b1011 B
1A
b0 @
bx ?
x>
bx =
bx <
bx ;
bx :
bx 9
x8
bx 7
bx 6
x5
bx 4
x3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
x)
bx (
bx '
bx &
bx %
bx $
bx #
bx "
bx !
$end
#2
b0 7
b0 _
b0 m
05
b10001010000000000000000000000000 '
b10001010000000000000000000000000 y
b10001010000000000000000000000000 0"
b1000 $
b1000 ,"
b1000 -"
b0 /"
0M
0N
0O
0P
0L
b0 Q
b0 W
0T
0U
0V
0Z
0Y
0R
0S
b0 =
b0 J
b0 ^
0X
b100 %
b100 )"
b100 +"
b100 ."
b0 1
b0 z
b0 *"
b0 /
b0 n
b0 #"
b0 &
b0 K
b0 $"
b0 (
b0 }
b0 #
b0 !"
b0 !
b0 ""
b0 "
b0 {
08
b0 9
b0 ~
b0 6
b0 o
b0 |
b0 u
b0 t
b0 s
b0 :
b0 r
0>
b0 -
b0 c
b0 v
b0 ;
b0 b
b0 w
b0 ?
b0 p
b0 4
b0 q
b0 0
b0 a
b0 x
b0 .
b0 h
b0 &"
b0 ,
b0 f
b0 %"
03
b0 2
b0 g
b0 <
b0 d
b0 e
0)
b0 *
b0 ("
b0 +
b0 '"
1D
#3
0E
0G
#4
0D
#6
b10000001000 7
b10000001000 _
b10000001000 m
1Z
b10000001000 =
b10000001000 J
b10000001000 ^
1P
b10000110101000001110000000000001 '
b10000110101000001110000000000001 y
b10000110101000001110000000000001 0"
b0 ]
b10 [
b100 /"
b1100 $
b1100 ,"
b1100 -"
bz e
bz u
bz t
bz s
b1011 -
b1011 c
b1011 v
b10001010000000000000000000000000 &
b10001010000000000000000000000000 K
b10001010000000000000000000000000 $"
b101 (
b101 }
b101 #
b101 !"
b1010000000000000000000000000 9
b1010000000000000000000000000 ~
b100 1
b100 z
b100 *"
b1000 %
b1000 )"
b1000 +"
b1000 ."
1D
#8
0D
#10
b1010011000001000 7
b1010011000001000 _
b1010011000001000 m
1L
b10 Q
b1010011000001000 =
b1010011000001000 J
b1010011000001000 ^
1M
b11000100000010000000000000000001 '
b11000100000010000000000000000001 y
b11000100000010000000000000000001 0"
b10000 $
b10000 ,"
b10000 -"
b1000 /"
b10100 ]
b1100 %
b1100 )"
b1100 +"
b1100 ."
b1000 1
b1000 z
b1000 *"
b100 /
b100 n
b100 #"
b10000110101000001110000000000001 &
b10000110101000001110000000000001 K
b10000110101000001110000000000001 $"
b11 (
b11 }
b11 #
b11 !"
b1 !
b1 ""
b11 "
b11 {
b110101000001110000000000001 9
b110101000001110000000000001 ~
b1000001110000000000001 6
b1000001110000000000001 o
b1000001110000000000001 |
b1000 ;
b1000 b
b1000 w
b1 4
b1 q
b1011 ,
b1011 f
b1011 %"
1D
#12
0D
#14
b110001001100 7
b110001001100 _
b110001001100 m
1Y
1T
b0 Q
0L
0M
b110001001100 =
b110001001100 J
b110001001100 ^
1O
b11001010001010000110000000000001 '
b11001010001010000110000000000001 y
b11001010001010000110000000000001 0"
b1 ]
b11 [
b1100 /"
b10100 $
b10100 ,"
b10100 -"
13
b1000001110000000000001 :
b1000001110000000000001 r
1>
b10 ?
b10 p
b1001 4
b1001 q
b100 0
b100 a
b100 x
b1000 /
b1000 n
b1000 #"
b11000100000010000000000000000001 &
b11000100000010000000000000000001 K
b11000100000010000000000000000001 $"
b10 (
b10 }
b10 #
b10 !"
b0 "
b0 {
b100000010000000000000000001 9
b100000010000000000000000001 ~
b10000000000000000001 6
b10000000000000000001 o
b10000000000000000001 |
b1100 1
b1100 z
b1100 *"
b10000 %
b10000 )"
b10000 +"
b10000 ."
1D
#16
0D
#18
b10110001100000 7
b10110001100000 _
b10110001100000 m
0Z
1U
0Y
b10110001100000 =
b10110001100000 J
b10110001100000 ^
1M
b10010101111111111111111111110 '
b10010101111111111111111111110 y
b10010101111111111111111111110 0"
b11000 $
b11000 ,"
b11000 -"
b10000 /"
b101 ]
b10100 %
b10100 )"
b10100 +"
b10100 ."
b10000 1
b10000 z
b10000 *"
b1100 /
b1100 n
b1100 #"
b11001010001010000110000000000001 &
b11001010001010000110000000000001 K
b11001010001010000110000000000001 $"
b101 (
b101 }
b101 #
b101 !"
b1 "
b1 {
b1010001010000110000000000001 9
b1010001010000110000000000001 ~
b1010000110000000000001 6
b1010000110000000000001 o
b1010000110000000000001 |
b10000000000000000001 :
b10000000000000000001 r
0>
b1001100 ;
b1001100 b
b1001100 w
b0 ?
b0 p
b11 4
b11 q
b1000 0
b1000 a
b1000 x
b100 .
b100 h
b100 &"
1)
1D
#20
0D
#22
b10000000000000 7
b10000000000000 _
b10000000000000 m
15
1R
0T
0U
0O
b1000010000000000000 =
b1000010000000000000 J
b1000010000000000000 ^
0P
b1011000011110000111100000110 '
b1011000011110000111100000110 y
b1011000011110000111100000110 0"
b10 \
b0 [
b10100 /"
b11100 $
b11100 ,"
b11100 -"
b100 *
b100 ("
b1000 .
b1000 h
b1000 &"
b100 2
b100 g
b100 <
b100 d
b1010000110000000000001 :
b1010000110000000000001 r
b1100000 ;
b1100000 b
b1100000 w
b1011 4
b1011 q
b1100 0
b1100 a
b1100 x
b10000 /
b10000 n
b10000 #"
b10010101111111111111111111110 &
b10010101111111111111111111110 K
b10010101111111111111111111110 $"
b1001 (
b1001 }
b1001 #
b1001 !"
b11110 !
b11110 ""
b11111 "
b11111 {
b10010101111111111111111111110 9
b10010101111111111111111111110 ~
b1111111111111111111110 6
b1111111111111111111110 o
b1111111111111111111110 |
b10100 1
b10100 z
b10100 *"
b11000 %
b11000 )"
b11000 +"
b11000 ."
1D
#24
0D
#26
b111001000000001000 7
b111001000000001000 _
b111001000000001000 m
05
1Z
0R
b1110 Q
0M
b111001000000001000 =
b111001000000001000 J
b111001000000001000 ^
1N
b1000000000000000000000000000100 '
b1000000000000000000000000000100 y
b1000000000000000000000000000100 0"
b100000 $
b100000 ,"
b100000 -"
b11000 /"
b100 \
b11100 %
b11100 )"
b11100 +"
b11100 ."
b11000 1
b11000 z
b11000 *"
b10100 /
b10100 n
b10100 #"
b1011000011110000111100000110 &
b1011000011110000111100000110 K
b1011000011110000111100000110 $"
b101 (
b101 }
b101 #
b101 !"
b110 !
b110 ""
b11100 "
b11100 {
b1011000011110000111100000110 9
b1011000011110000111100000110 ~
b11110000111100000110 6
b11110000111100000110 o
b11110000111100000110 |
b1111111111111111111110 :
b1111111111111111111110 r
b0 ;
b0 b
b0 w
b1000 4
b1000 q
b10000 0
b10000 a
b10000 x
b1100 .
b1100 h
b1100 &"
03
b0 2
b0 g
b110 <
b110 d
b1000 *
b1000 ("
1D
#28
0D
#30
b100000001010 7
b100000001010 _
b100000001010 m
b0 Q
1S
0N
b100000001010 =
b100000001010 J
b100000001010 ^
1O
b10000001110000000000000000001111 '
b10000001110000000000000000001111 y
b10000001110000000000000000001111 0"
b1 [
b11100 /"
b100100 $
b100100 ,"
b100100 -"
0)
b1100 *
b1100 ("
b10000 .
b10000 h
b10000 &"
b0 <
b0 d
b11110000111100000110 :
b11110000111100000110 r
b1000 ;
b1000 b
b1000 w
b1110 ?
b1110 p
b100 4
b100 q
b10100 0
b10100 a
b10100 x
b11000 /
b11000 n
b11000 #"
b1000000000000000000000000000100 &
b1000000000000000000000000000100 K
b1000000000000000000000000000100 $"
b0 (
b0 }
b0 #
b0 !"
b100 !
b100 ""
b0 "
b0 {
b100 9
b100 ~
b100 6
b100 o
b100 |
b11100 1
b11100 z
b11100 *"
b100000 %
b100000 )"
b100000 +"
b100000 ."
1D
#32
0D
#33
1G
1E
#34
b0 7
b0 _
b0 m
0O
0Z
b0 =
b0 J
b0 ^
0S
b10001010000000000000000000000000 '
b10001010000000000000000000000000 y
b10001010000000000000000000000000 0"
b1000 $
b1000 ,"
b1000 -"
b0 /"
b100 %
b100 )"
b100 +"
b100 ."
b0 1
b0 z
b0 *"
b0 /
b0 n
b0 #"
b0 &
b0 K
b0 $"
b0 !
b0 ""
b0 9
b0 ~
b0 6
b0 o
b0 |
b0 u
b0 t
b0 s
b0 :
b0 r
b0 -
b0 c
b0 v
b0 ;
b0 b
b0 w
b0 ?
b0 p
b0 4
b0 q
b0 0
b0 a
b0 x
b0 .
b0 h
b0 &"
b0 ,
b0 f
b0 %"
b0 e
b0 *
b0 ("
1D
#36
0D
#38
1D
#40
0D
1C
#42
1D
#44
0D
#46
1D
#48
0D
#50
1D
#52
0D
