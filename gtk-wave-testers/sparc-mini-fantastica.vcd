$date
	Mon Jun 12 20:06:31 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module phase3Tester $end
$var wire 5 ! rs2 [4:0] $end
$var wire 5 " rs1 [4:0] $end
$var wire 5 # rd [4:0] $end
$var wire 32 $ nPC4 [31:0] $end
$var wire 32 % nPC [31:0] $end
$var wire 32 & instruction_out [31:0] $end
$var wire 32 ' instruction [31:0] $end
$var wire 4 ( cond [3:0] $end
$var wire 1 ) WB_Register_File_Enable $end
$var wire 32 * WB_RD_out [31:0] $end
$var wire 5 + RD_WB [4:0] $end
$var wire 5 , RD_MEM [4:0] $end
$var wire 5 - RD_EX [4:0] $end
$var wire 32 . PC_MEM [31:0] $end
$var wire 32 / PC_ID [31:0] $end
$var wire 32 0 PC_EX [31:0] $end
$var wire 32 1 PC [31:0] $end
$var wire 3 2 OutputHandlerInstructions [2:0] $end
$var wire 1 3 MEM_Store_instr $end
$var wire 1 4 MEM_CU $end
$var wire 4 5 IS [3:0] $end
$var wire 1 6 ID_branch_instr $end
$var wire 22 7 ID_Imm22 [21:0] $end
$var wire 19 8 ID_CU [18:0] $end
$var wire 1 9 I29_branch_instr $end
$var wire 30 : I29_0 [29:0] $end
$var wire 22 ; EX_Imm22 [21:0] $end
$var wire 10 < EX_CU [9:0] $end
$var wire 5 = DataMemInstructions [4:0] $end
$var wire 20 > CU_SIG [19:0] $end
$var wire 1 ? CC_Enable $end
$var wire 4 @ ALU_OP [3:0] $end
$var reg 8 A Addr [7:0] $end
$var reg 1 B LE $end
$var reg 5 C RD_ID [4:0] $end
$var reg 1 D S $end
$var reg 1 E clk $end
$var reg 1 F clr $end
$var reg 8 G data [7:0] $end
$var reg 1 H reset $end
$var integer 32 I code [31:0] $end
$var integer 32 J fi [31:0] $end
$scope module CU $end
$var wire 1 E clk $end
$var wire 1 F clr $end
$var wire 20 K instr_signals [19:0] $end
$var wire 32 L instr [31:0] $end
$var reg 1 M CC_Enable $end
$var reg 1 N I13 $end
$var reg 1 O I24 $end
$var reg 1 P I30 $end
$var reg 1 Q I31 $end
$var reg 4 R ID_ALU_OP_instr [3:0] $end
$var reg 1 S ID_branch_instr $end
$var reg 1 T ID_call_instr $end
$var reg 1 U ID_data_mem_Enable $end
$var reg 1 V ID_data_mem_RW $end
$var reg 1 W ID_data_mem_SE $end
$var reg 2 X ID_data_mem_Size [1:0] $end
$var reg 1 Y ID_jmpl_instr $end
$var reg 1 Z ID_load_instr $end
$var reg 1 [ ID_register_file_Enable $end
$var reg 1 \ ID_store_instr $end
$var reg 2 ] instr_op [1:0] $end
$var reg 3 ^ is_sethi [2:0] $end
$var reg 6 _ op3 [5:0] $end
$upscope $end
$scope module CU_MUX $end
$var wire 1 D S $end
$var wire 20 ` cu_in_mux [19:0] $end
$var reg 19 a CU_SIGNALS [18:0] $end
$var reg 1 6 ID_branch_instr_out $end
$upscope $end
$scope module EX_MEM $end
$var wire 32 b EX_ALU_OUT [31:0] $end
$var wire 1 E clk $end
$var wire 1 F clr $end
$var wire 32 c PC [31:0] $end
$var wire 10 d EX_control_unit_instr [9:0] $end
$var wire 5 e EX_RD_instr [4:0] $end
$var reg 5 f Data_Mem_instructions [4:0] $end
$var reg 32 g MEM_ALU_OUT [31:0] $end
$var reg 5 h MEM_RD_instr [4:0] $end
$var reg 1 4 MEM_control_unit_instr $end
$var reg 3 i Output_Handler_instructions [2:0] $end
$var reg 32 j PC_MEM [31:0] $end
$var reg 1 3 Store_instr $end
$upscope $end
$scope module ID_EX $end
$var wire 32 k ID_MX1 [31:0] $end
$var wire 32 l ID_MX2 [31:0] $end
$var wire 32 m ID_MX3 [31:0] $end
$var wire 5 n ID_RD_instr [4:0] $end
$var wire 19 o ID_control_unit_instr [18:0] $end
$var wire 1 E clk $end
$var wire 1 F clr $end
$var wire 32 p PC [31:0] $end
$var wire 22 q Imm22 [21:0] $end
$var reg 4 r EX_ALU_OP_instr [3:0] $end
$var reg 1 ? EX_CC_Enable_instr $end
$var reg 4 s EX_IS_instr [3:0] $end
$var reg 22 t EX_Imm22 [21:0] $end
$var reg 32 u EX_MX1 [31:0] $end
$var reg 32 v EX_MX2 [31:0] $end
$var reg 32 w EX_MX3 [31:0] $end
$var reg 5 x EX_RD_instr [4:0] $end
$var reg 10 y EX_control_unit_instr [9:0] $end
$var reg 32 z PC_EX [31:0] $end
$upscope $end
$scope module IF_ID $end
$var wire 1 B LE $end
$var wire 1 E clk $end
$var wire 1 F clr $end
$var wire 1 H reset $end
$var wire 32 { instruction [31:0] $end
$var wire 32 | PC [31:0] $end
$var reg 5 } I18_14 [4:0] $end
$var reg 22 ~ I21_0 [21:0] $end
$var reg 4 !" I28_25 [3:0] $end
$var reg 30 "" I29_0 [29:0] $end
$var reg 5 #" I29_25 [4:0] $end
$var reg 1 9 I29_branch_instr $end
$var reg 5 $" I4_0 [4:0] $end
$var reg 32 %" PC_ID_out [31:0] $end
$var reg 32 &" instruction_out [31:0] $end
$upscope $end
$scope module MEM_WB $end
$var wire 5 '" MEM_RD_instr [4:0] $end
$var wire 1 4 MEM_control_unit_instr $end
$var wire 32 (" MUX_out [31:0] $end
$var wire 1 E clk $end
$var wire 1 F clr $end
$var reg 5 )" WB_RD_instr [4:0] $end
$var reg 32 *" WB_RD_out [31:0] $end
$var reg 1 ) WB_Register_File_Enable $end
$upscope $end
$scope module PC_Reg $end
$var wire 1 B LE $end
$var wire 1 E clk $end
$var wire 1 F clr $end
$var wire 32 +" D [31:0] $end
$var reg 32 ," Q [31:0] $end
$upscope $end
$scope module adder $end
$var wire 32 -" PC_in [31:0] $end
$var reg 32 ." PC_out [31:0] $end
$upscope $end
$scope module nPC_Reg $end
$var wire 32 /" D [31:0] $end
$var wire 1 B LE $end
$var wire 1 E clk $end
$var wire 1 F clr $end
$var reg 32 0" Q [31:0] $end
$upscope $end
$scope module ram1 $end
$var wire 8 1" Address [7:0] $end
$var reg 32 2" DataOut [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx 2"
bx 1"
bx 0"
bx /"
bx ."
bx -"
bx ,"
bx +"
bx *"
bx )"
bx ("
bx '"
bx &"
bx %"
bx $"
bx #"
bx ""
bx !"
bx ~
bx }
bx |
bx {
bx z
bx y
bx x
bx w
bx v
bx u
bx t
bx s
bx r
bx q
bx p
bx o
b1011 n
bz m
bz l
bz k
bx j
bx i
bx h
bx g
bx f
bx e
bx d
bx c
bz b
bx a
bx `
bx _
bx ^
bx ]
x\
x[
xZ
xY
bx X
xW
xV
xU
xT
xS
bx R
xQ
xP
xO
xN
xM
bx L
bx K
b10000000000000000000000000000011 J
b1 I
1H
b11111110 G
1F
0E
0D
b1011 C
1B
b0 A
bx @
x?
bx >
bx =
bx <
bx ;
bx :
x9
bx 8
bx 7
x6
bx 5
x4
x3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
x)
bx (
bx '
bx &
bx %
bx $
bx #
bx "
bx !
$end
#2
b0 8
b0 a
b0 o
06
b10001010000000000000000000000000 '
b10001010000000000000000000000000 {
b10001010000000000000000000000000 2"
b1000 $
b1000 ."
b1000 /"
b0 1"
0N
0O
0P
0Q
0M
b0 R
b0 X
0U
0V
0W
0[
0\
0Z
0S
0T
b0 >
b0 K
b0 `
0Y
b100 %
b100 +"
b100 -"
b100 0"
b0 1
b0 |
b0 ,"
b0 /
b0 p
b0 %"
b0 &
b0 L
b0 &"
b0 (
b0 !"
b0 #
b0 #"
b0 !
b0 $"
b0 "
b0 }
09
b0 :
b0 ""
b0 7
b0 q
b0 ~
b0 w
b0 v
b0 u
b0 ;
b0 t
0?
b0 -
b0 e
b0 x
b0 <
b0 d
b0 y
b0 @
b0 r
b0 5
b0 s
b0 0
b0 c
b0 z
b0 .
b0 j
b0 ("
b0 ,
b0 h
b0 '"
03
04
b0 2
b0 i
b0 =
b0 f
b0 g
0)
b0 *
b0 *"
b0 +
b0 )"
1E
#3
0F
0H
#4
0E
#6
b100000011000 8
b100000011000 a
b100000011000 o
1\
1[
b100000011000 >
b100000011000 K
b100000011000 `
1Q
b10000110101000001110000000000001 '
b10000110101000001110000000000001 {
b10000110101000001110000000000001 2"
b0 _
b10 ]
b100 1"
b1100 $
b1100 ."
b1100 /"
bz g
bz w
bz v
bz u
b1011 -
b1011 e
b1011 x
b10001010000000000000000000000000 &
b10001010000000000000000000000000 L
b10001010000000000000000000000000 &"
b101 (
b101 !"
b101 #
b101 #"
b1010000000000000000000000000 :
b1010000000000000000000000000 ""
b100 1
b100 |
b100 ,"
b1000 %
b1000 +"
b1000 -"
b1000 0"
1E
#8
0E
#10
b10100110000011000 8
b10100110000011000 a
b10100110000011000 o
1M
b10 R
b10100110000011000 >
b10100110000011000 K
b10100110000011000 `
1N
b11000100000010000000000000000001 '
b11000100000010000000000000000001 {
b11000100000010000000000000000001 2"
b10000 $
b10000 ."
b10000 /"
b1000 1"
b10100 _
b1100 %
b1100 +"
b1100 -"
b1100 0"
b1000 1
b1000 |
b1000 ,"
b100 /
b100 p
b100 %"
b10000110101000001110000000000001 &
b10000110101000001110000000000001 L
b10000110101000001110000000000001 &"
b11 (
b11 !"
b11 #
b11 #"
b1 !
b1 $"
b11 "
b11 }
b110101000001110000000000001 :
b110101000001110000000000001 ""
b1000001110000000000001 7
b1000001110000000000001 q
b1000001110000000000001 ~
b11000 <
b11000 d
b11000 y
b1 5
b1 s
b1011 ,
b1011 h
b1011 '"
1E
#12
0E
#14
b1100010010100 8
b1100010010100 a
b1100010010100 o
0\
1Z
1U
b0 R
0M
0N
b1100010010100 >
b1100010010100 K
b1100010010100 `
1P
b11001010001010000110000000000001 '
b11001010001010000110000000000001 {
b11001010001010000110000000000001 2"
b1 _
b11 ]
b1100 1"
b10100 $
b10100 ."
b10100 /"
b1011 +
b1011 )"
13
14
b1000001110000000000001 ;
b1000001110000000000001 t
1?
b10 @
b10 r
b1001 5
b1001 s
b100 0
b100 c
b100 z
b1000 /
b1000 p
b1000 %"
b11000100000010000000000000000001 &
b11000100000010000000000000000001 L
b11000100000010000000000000000001 &"
b10 (
b10 !"
b10 #
b10 #"
b0 "
b0 }
b100000010000000000000000001 :
b100000010000000000000000001 ""
b10000000000000000001 7
b10000000000000000001 q
b10000000000000000001 ~
b1100 1
b1100 |
b1100 ,"
b10000 %
b10000 +"
b10000 -"
b10000 0"
1E
#16
0E
#18
b101100011000000 8
b101100011000000 a
b101100011000000 o
0[
1V
0Z
b101100011000000 >
b101100011000000 K
b101100011000000 `
1N
b10010101111111111111111111110 '
b10010101111111111111111111110 {
b10010101111111111111111111110 2"
b11000 $
b11000 ."
b11000 /"
b10000 1"
b101 _
b10100 %
b10100 +"
b10100 -"
b10100 0"
b10000 1
b10000 |
b10000 ,"
b1100 /
b1100 p
b1100 %"
b11001010001010000110000000000001 &
b11001010001010000110000000000001 L
b11001010001010000110000000000001 &"
b101 (
b101 !"
b101 #
b101 #"
b1 "
b1 }
b1010001010000110000000000001 :
b1010001010000110000000000001 ""
b1010000110000000000001 7
b1010000110000000000001 q
b1010000110000000000001 ~
b10000000000000000001 ;
b10000000000000000001 t
0?
b10010100 <
b10010100 d
b10010100 y
b0 @
b0 r
b11 5
b11 s
b1000 0
b1000 c
b1000 z
b100 .
b100 j
b100 ("
1)
1E
#20
0E
#22
b100000000000000 8
b100000000000000 a
b100000000000000 o
16
1S
0U
0V
0P
b10000100000000000000 >
b10000100000000000000 K
b10000100000000000000 `
0Q
b1011000011110000111100000110 '
b1011000011110000111100000110 {
b1011000011110000111100000110 2"
b10 ^
b0 ]
b10100 1"
b11100 $
b11100 ."
b11100 /"
b100 *
b100 *"
b1000 .
b1000 j
b1000 ("
03
b100 2
b100 i
b100 =
b100 f
b1010000110000000000001 ;
b1010000110000000000001 t
b11000000 <
b11000000 d
b11000000 y
b1011 5
b1011 s
b1100 0
b1100 c
b1100 z
b10000 /
b10000 p
b10000 %"
b10010101111111111111111111110 &
b10010101111111111111111111110 L
b10010101111111111111111111110 &"
b1001 (
b1001 !"
b1001 #
b1001 #"
b11110 !
b11110 $"
b11111 "
b11111 }
b10010101111111111111111111110 :
b10010101111111111111111111110 ""
b1111111111111111111110 7
b1111111111111111111110 q
b1111111111111111111110 ~
b10100 1
b10100 |
b10100 ,"
b11000 %
b11000 +"
b11000 -"
b11000 0"
1E
#24
0E
#26
b1110010000000010000 8
b1110010000000010000 a
b1110010000000010000 o
06
1[
0S
b1110 R
0N
b1110010000000010000 >
b1110010000000010000 K
b1110010000000010000 `
1O
b1000000000000000000000000000100 '
b1000000000000000000000000000100 {
b1000000000000000000000000000100 2"
b100000 $
b100000 ."
b100000 /"
b11000 1"
b100 ^
b11100 %
b11100 +"
b11100 -"
b11100 0"
b11000 1
b11000 |
b11000 ,"
b10100 /
b10100 p
b10100 %"
b1011000011110000111100000110 &
b1011000011110000111100000110 L
b1011000011110000111100000110 &"
b101 (
b101 !"
b101 #
b101 #"
b110 !
b110 $"
b11100 "
b11100 }
b1011000011110000111100000110 :
b1011000011110000111100000110 ""
b11110000111100000110 7
b11110000111100000110 q
b11110000111100000110 ~
b1111111111111111111110 ;
b1111111111111111111110 t
b0 <
b0 d
b0 y
b1000 5
b1000 s
b10000 0
b10000 c
b10000 z
b1100 .
b1100 j
b1100 ("
04
b0 2
b0 i
b110 =
b110 f
b1000 *
b1000 *"
1E
#28
0E
#30
b1000000010010 8
b1000000010010 a
b1000000010010 o
b0 R
1T
0O
b1000000010010 >
b1000000010010 K
b1000000010010 `
1P
b10000001110000000000000000001111 '
b10000001110000000000000000001111 {
b10000001110000000000000000001111 2"
b1 ]
b11100 1"
b100100 $
b100100 ."
b100100 /"
0)
b1100 *
b1100 *"
b10000 .
b10000 j
b10000 ("
b0 =
b0 f
b11110000111100000110 ;
b11110000111100000110 t
b10000 <
b10000 d
b10000 y
b1110 @
b1110 r
b100 5
b100 s
b10100 0
b10100 c
b10100 z
b11000 /
b11000 p
b11000 %"
b1000000000000000000000000000100 &
b1000000000000000000000000000100 L
b1000000000000000000000000000100 &"
b0 (
b0 !"
b0 #
b0 #"
b100 !
b100 $"
b0 "
b0 }
b100 :
b100 ""
b100 7
b100 q
b100 ~
b11100 1
b11100 |
b11100 ,"
b100000 %
b100000 +"
b100000 -"
b100000 0"
1E
#32
0E
#33
1H
1F
#34
b0 8
b0 a
b0 o
0P
0[
b0 >
b0 K
b0 `
0T
b10001010000000000000000000000000 '
b10001010000000000000000000000000 {
b10001010000000000000000000000000 2"
b1000 $
b1000 ."
b1000 /"
b0 1"
b100 %
b100 +"
b100 -"
b100 0"
b0 1
b0 |
b0 ,"
b0 /
b0 p
b0 %"
b0 &
b0 L
b0 &"
b0 !
b0 $"
b0 :
b0 ""
b0 7
b0 q
b0 ~
b0 w
b0 v
b0 u
b0 ;
b0 t
b0 -
b0 e
b0 x
b0 <
b0 d
b0 y
b0 @
b0 r
b0 5
b0 s
b0 0
b0 c
b0 z
b0 .
b0 j
b0 ("
b0 ,
b0 h
b0 '"
b0 g
b0 *
b0 *"
b0 +
b0 )"
1E
#36
0E
#38
1E
#40
0E
1D
#42
1E
#44
0E
#46
1E
#48
0E
#50
1E
#52
0E
