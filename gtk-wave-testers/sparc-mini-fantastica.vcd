$date
	Thu May 25 21:10:33 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module phase3Tester $end
$var wire 5 ! rs2 [4:0] $end
$var wire 5 " rs1 [4:0] $end
$var wire 5 # rd [4:0] $end
$var wire 32 $ nPC [31:0] $end
$var wire 32 % instruction_out [31:0] $end
$var wire 32 & instruction [31:0] $end
$var wire 4 ' cond [3:0] $end
$var wire 1 ( WB_Register_File_Enable $end
$var wire 32 ) WB_RD_out [31:0] $end
$var wire 5 * RD_WB [4:0] $end
$var wire 5 + RD_MEM [4:0] $end
$var wire 5 , RD_EX [4:0] $end
$var wire 32 - PC_MEM [31:0] $end
$var wire 32 . PC_ID [31:0] $end
$var wire 32 / PC_EX [31:0] $end
$var wire 32 0 PC [31:0] $end
$var wire 3 1 OutputHandlerInstructions [2:0] $end
$var wire 1 2 MEM_CU $end
$var wire 4 3 IS [3:0] $end
$var wire 1 4 ID_branch_instr $end
$var wire 22 5 ID_Imm22 [21:0] $end
$var wire 18 6 ID_CU [17:0] $end
$var wire 1 7 I29_branch_instr $end
$var wire 30 8 I29_0 [29:0] $end
$var wire 22 9 EX_Imm22 [21:0] $end
$var wire 9 : EX_CU [8:0] $end
$var wire 5 ; DataMemInstructions [4:0] $end
$var wire 19 < CU_SIG [18:0] $end
$var wire 1 = CC_Enable $end
$var wire 4 > ALU_OP [3:0] $end
$var reg 32 ? ALU_OUT [31:0] $end
$var reg 8 @ Addr [7:0] $end
$var reg 1 A LE $end
$var reg 2 B PC_MUX [1:0] $end
$var reg 5 C RD_ID [4:0] $end
$var reg 1 D S $end
$var reg 32 E TA [31:0] $end
$var reg 1 F clk $end
$var reg 1 G clr $end
$var reg 8 H data [7:0] $end
$var reg 1 I reset $end
$var integer 32 J code [31:0] $end
$var integer 32 K fi [31:0] $end
$scope module CU $end
$var wire 1 F clk $end
$var wire 1 G clr $end
$var wire 19 L instr_signals [18:0] $end
$var wire 32 M instr [31:0] $end
$var reg 1 N CC_Enable $end
$var reg 1 O I13 $end
$var reg 1 P I24 $end
$var reg 1 Q I30 $end
$var reg 1 R I31 $end
$var reg 4 S ID_ALU_OP_instr [3:0] $end
$var reg 1 T ID_branch_instr $end
$var reg 1 U ID_call_instr $end
$var reg 1 V ID_data_mem_Enable $end
$var reg 1 W ID_data_mem_RW $end
$var reg 1 X ID_data_mem_SE $end
$var reg 2 Y ID_data_mem_Size [1:0] $end
$var reg 1 Z ID_jmpl_instr $end
$var reg 1 [ ID_load_instr $end
$var reg 1 \ ID_register_file_Enable $end
$var reg 2 ] instr_op [1:0] $end
$var reg 3 ^ is_sethi [2:0] $end
$var reg 6 _ op3 [5:0] $end
$upscope $end
$scope module CU_MUX $end
$var wire 1 D S $end
$var wire 19 ` cu_in_mux [18:0] $end
$var reg 18 a CU_SIGNALS [17:0] $end
$var reg 1 4 ID_branch_instr_out $end
$upscope $end
$scope module EX_MEM $end
$var wire 32 b EX_ALU_OUT [31:0] $end
$var wire 1 F clk $end
$var wire 1 G clr $end
$var wire 32 c PC [31:0] $end
$var wire 9 d EX_control_unit_instr [8:0] $end
$var wire 5 e EX_RD_instr [4:0] $end
$var reg 5 f Data_Mem_instructions [4:0] $end
$var reg 32 g MEM_ALU_OUT [31:0] $end
$var reg 5 h MEM_RD_instr [4:0] $end
$var reg 1 2 MEM_control_unit_instr $end
$var reg 3 i Output_Handler_instructions [2:0] $end
$var reg 32 j PC_MEM [31:0] $end
$upscope $end
$scope module ID_EX $end
$var wire 32 k ID_MX1 [31:0] $end
$var wire 32 l ID_MX2 [31:0] $end
$var wire 32 m ID_MX3 [31:0] $end
$var wire 5 n ID_RD_instr [4:0] $end
$var wire 18 o ID_control_unit_instr [17:0] $end
$var wire 1 F clk $end
$var wire 1 G clr $end
$var wire 32 p PC [31:0] $end
$var wire 22 q Imm22 [21:0] $end
$var reg 4 r EX_ALU_OP_instr [3:0] $end
$var reg 1 = EX_CC_Enable_instr $end
$var reg 4 s EX_IS_instr [3:0] $end
$var reg 22 t EX_Imm22 [21:0] $end
$var reg 32 u EX_MX1 [31:0] $end
$var reg 32 v EX_MX2 [31:0] $end
$var reg 32 w EX_MX3 [31:0] $end
$var reg 5 x EX_RD_instr [4:0] $end
$var reg 9 y EX_control_unit_instr [8:0] $end
$var reg 32 z PC_EX [31:0] $end
$upscope $end
$scope module IF_ID $end
$var wire 1 A LE $end
$var wire 1 F clk $end
$var wire 1 G clr $end
$var wire 1 I reset $end
$var wire 32 { instruction [31:0] $end
$var wire 32 | PC [31:0] $end
$var reg 5 } I18_14 [4:0] $end
$var reg 22 ~ I21_0 [21:0] $end
$var reg 4 !" I28_25 [3:0] $end
$var reg 30 "" I29_0 [29:0] $end
$var reg 5 #" I29_25 [4:0] $end
$var reg 1 7 I29_branch_instr $end
$var reg 5 $" I4_0 [4:0] $end
$var reg 32 %" PC_ID_out [31:0] $end
$var reg 32 &" instruction_out [31:0] $end
$upscope $end
$scope module MEM_WB $end
$var wire 5 '" MEM_RD_instr [4:0] $end
$var wire 1 2 MEM_control_unit_instr $end
$var wire 32 (" MUX_out [31:0] $end
$var wire 1 F clk $end
$var wire 1 G clr $end
$var reg 5 )" WB_RD_instr [4:0] $end
$var reg 32 *" WB_RD_out [31:0] $end
$var reg 1 ( WB_Register_File_Enable $end
$upscope $end
$scope module PC_reg $end
$var wire 32 +" ALU_OUT [31:0] $end
$var wire 1 A LE $end
$var wire 32 ," TA [31:0] $end
$var wire 1 F clk $end
$var wire 1 G clr $end
$var wire 2 -" mux_select [1:0] $end
$var wire 32 ." nPC [31:0] $end
$var reg 32 /" OUT [31:0] $end
$upscope $end
$scope module adder $end
$var wire 32 0" PC_in [31:0] $end
$var reg 32 1" PC_out [31:0] $end
$upscope $end
$scope module ram1 $end
$var wire 8 2" Address [7:0] $end
$var reg 32 3" DataOut [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b10001010000000000000000000000000 3"
b0 2"
b100 1"
b0 0"
b0 /"
b100 ."
b0 -"
bx ,"
bx +"
b0 *"
b0 )"
b0 ("
b0 '"
b0 &"
b0 %"
b0 $"
b0 #"
b0 ""
b0 !"
b0 ~
b0 }
b0 |
b10001010000000000000000000000000 {
b0 z
b0 y
b0 x
b0 w
b0 v
b0 u
b0 t
b0 s
b0 r
b0 q
b0 p
b0 o
b1011 n
bz m
bz l
bz k
b0 j
b0 i
b0 h
b0 g
b0 f
b0 e
b0 d
b0 c
bz b
b0 a
b0 `
bx _
bx ^
bx ]
0\
0[
0Z
b0 Y
0X
0W
0V
0U
0T
b0 S
0R
0Q
0P
0O
0N
b0 M
b0 L
b10000000000000000000000000000011 K
b1 J
1I
b11111110 H
1G
0F
bx E
0D
b1011 C
b0 B
1A
b0 @
bx ?
b0 >
0=
b0 <
b0 ;
b0 :
b0 9
b0 8
07
b0 6
b0 5
04
b0 3
02
b0 1
b0 0
b0 /
b0 .
b0 -
b0 ,
b0 +
b0 *
b0 )
0(
b0 '
b10001010000000000000000000000000 &
b0 %
b100 $
b0 #
b0 "
b0 !
$end
#2
1F
#3
b10000001000 6
b10000001000 a
b10000001000 o
1\
b10000001000 <
b10000001000 L
b10000001000 `
1R
b0 _
b10 ]
b10001010000000000000000000000000 %
b10001010000000000000000000000000 M
b10001010000000000000000000000000 &"
b101 '
b101 !"
b101 #
b101 #"
b1010000000000000000000000000 8
b1010000000000000000000000000 ""
bz w
bz v
bz u
b1011 ,
b1011 e
b1011 x
bz g
0G
0I
#4
0F
#6
b10000110101000001110000000000001 &
b10000110101000001110000000000001 {
b10000110101000001110000000000001 3"
b100 2"
b1000 $
b1000 ."
b1000 1"
b1011 +
b1011 h
b1011 '"
b1000 :
b1000 d
b1000 y
b1 3
b1 s
b100 0
b100 |
b100 /"
b100 0"
1F
#8
0F
#10
b1010011000001000 6
b1010011000001000 a
b1010011000001000 o
1N
b10 S
b1010011000001000 <
b1010011000001000 L
b1010011000001000 `
1O
b11000100000010000000000000000001 &
b11000100000010000000000000000001 {
b11000100000010000000000000000001 3"
b10100 _
b1000 2"
b1100 $
b1100 ."
b1100 1"
b100 .
b100 p
b100 %"
b10000110101000001110000000000001 %
b10000110101000001110000000000001 M
b10000110101000001110000000000001 &"
b11 '
b11 !"
b11 #
b11 #"
b1 !
b1 $"
b11 "
b11 }
b110101000001110000000000001 8
b110101000001110000000000001 ""
b1000001110000000000001 5
b1000001110000000000001 q
b1000001110000000000001 ~
12
b1000 0
b1000 |
b1000 /"
b1000 0"
1F
#12
0F
#14
b110001001100 6
b110001001100 a
b110001001100 o
1[
1V
b0 S
0N
0O
b110001001100 <
b110001001100 L
b110001001100 `
1Q
b11001010001010000110000000000001 &
b11001010001010000110000000000001 {
b11001010001010000110000000000001 3"
b1 _
b11 ]
b1100 2"
b10000 $
b10000 ."
b10000 1"
1(
b1000001110000000000001 9
b1000001110000000000001 t
1=
b10 >
b10 r
b1001 3
b1001 s
b100 /
b100 c
b100 z
b1000 .
b1000 p
b1000 %"
b11000100000010000000000000000001 %
b11000100000010000000000000000001 M
b11000100000010000000000000000001 &"
b10 '
b10 !"
b10 #
b10 #"
b0 "
b0 }
b100000010000000000000000001 8
b100000010000000000000000001 ""
b10000000000000000001 5
b10000000000000000001 q
b10000000000000000001 ~
b1100 0
b1100 |
b1100 /"
b1100 0"
1F
#16
0F
#18
b10110001100000 6
b10110001100000 a
b10110001100000 o
0\
1W
0[
b10110001100000 <
b10110001100000 L
b10110001100000 `
1O
b10010101111111111111111111110 &
b10010101111111111111111111110 {
b10010101111111111111111111110 3"
b101 _
b10000 2"
b10100 $
b10100 ."
b10100 1"
b1100 .
b1100 p
b1100 %"
b11001010001010000110000000000001 %
b11001010001010000110000000000001 M
b11001010001010000110000000000001 &"
b101 '
b101 !"
b101 #
b101 #"
b1 "
b1 }
b1010001010000110000000000001 8
b1010001010000110000000000001 ""
b1010000110000000000001 5
b1010000110000000000001 q
b1010000110000000000001 ~
b10000000000000000001 9
b10000000000000000001 t
0=
b1001100 :
b1001100 d
b1001100 y
b0 >
b0 r
b11 3
b11 s
b1000 /
b1000 c
b1000 z
b100 -
b100 j
b100 ("
b10000 0
b10000 |
b10000 /"
b10000 0"
1F
#20
0F
#22
b10000000000000 6
b10000000000000 a
b10000000000000 o
14
1T
0V
0W
0Q
b1000010000000000000 <
b1000010000000000000 L
b1000010000000000000 `
0R
b1011000011110000111100000110 &
b1011000011110000111100000110 {
b1011000011110000111100000110 3"
b10 ^
b0 ]
b10100 2"
b11000 $
b11000 ."
b11000 1"
b100 )
b100 *"
b1000 -
b1000 j
b1000 ("
b100 1
b100 i
b100 ;
b100 f
b1010000110000000000001 9
b1010000110000000000001 t
b1100000 :
b1100000 d
b1100000 y
b1011 3
b1011 s
b1100 /
b1100 c
b1100 z
b10000 .
b10000 p
b10000 %"
b10010101111111111111111111110 %
b10010101111111111111111111110 M
b10010101111111111111111111110 &"
b1001 '
b1001 !"
b1001 #
b1001 #"
b11110 !
b11110 $"
b11111 "
b11111 }
b10010101111111111111111111110 8
b10010101111111111111111111110 ""
b1111111111111111111110 5
b1111111111111111111110 q
b1111111111111111111110 ~
b10100 0
b10100 |
b10100 /"
b10100 0"
1F
#24
0F
#26
b111001000000001000 6
b111001000000001000 a
b111001000000001000 o
04
1\
0T
b1110 S
0O
b111001000000001000 <
b111001000000001000 L
b111001000000001000 `
1P
b1000000000000000000000000000100 &
b1000000000000000000000000000100 {
b1000000000000000000000000000100 3"
b100 ^
b11000 2"
b11100 $
b11100 ."
b11100 1"
b10100 .
b10100 p
b10100 %"
b1011000011110000111100000110 %
b1011000011110000111100000110 M
b1011000011110000111100000110 &"
b101 '
b101 !"
b101 #
b101 #"
b110 !
b110 $"
b11100 "
b11100 }
b1011000011110000111100000110 8
b1011000011110000111100000110 ""
b11110000111100000110 5
b11110000111100000110 q
b11110000111100000110 ~
b1111111111111111111110 9
b1111111111111111111110 t
b0 :
b0 d
b0 y
b1000 3
b1000 s
b10000 /
b10000 c
b10000 z
b1100 -
b1100 j
b1100 ("
02
b0 1
b0 i
b110 ;
b110 f
b1000 )
b1000 *"
b11000 0
b11000 |
b11000 /"
b11000 0"
1F
#28
0F
#30
b100000001010 6
b100000001010 a
b100000001010 o
b0 S
1U
0P
b100000001010 <
b100000001010 L
b100000001010 `
1Q
b10000001110000000000000000001111 &
b10000001110000000000000000001111 {
b10000001110000000000000000001111 3"
b1 ]
b11100 2"
b100000 $
b100000 ."
b100000 1"
0(
b1100 )
b1100 *"
b10000 -
b10000 j
b10000 ("
b0 ;
b0 f
b11110000111100000110 9
b11110000111100000110 t
b1000 :
b1000 d
b1000 y
b1110 >
b1110 r
b100 3
b100 s
b10100 /
b10100 c
b10100 z
b11000 .
b11000 p
b11000 %"
b1000000000000000000000000000100 %
b1000000000000000000000000000100 M
b1000000000000000000000000000100 &"
b0 '
b0 !"
b0 #
b0 #"
b100 !
b100 $"
b0 "
b0 }
b100 8
b100 ""
b100 5
b100 q
b100 ~
b11100 0
b11100 |
b11100 /"
b11100 0"
1F
#32
0F
#34
b1010000000001 6
b1010000000001 a
b1010000000001 o
0\
1Z
0U
1P
0Q
b1010000000001 <
b1010000000001 L
b1010000000001 `
1R
b10001010000000000000000000000000 &
b10001010000000000000000000000000 {
b10001010000000000000000000000000 3"
b111000 _
b10 ]
b100000 2"
b100100 $
b100100 ."
b100100 1"
b11100 .
b11100 p
b11100 %"
b10000001110000000000000000001111 %
b10000001110000000000000000001111 M
b10000001110000000000000000001111 &"
b1111 !
b1111 $"
b1110000000000000000001111 8
b1110000000000000000001111 ""
b1111 5
b1111 q
b1111 ~
b100 9
b100 t
b1010 :
b1010 d
b1010 y
b0 >
b0 r
b10 3
b10 s
b11000 /
b11000 c
b11000 z
b10100 -
b10100 j
b10100 ("
12
b10000 )
b10000 *"
b100000 0
b100000 |
b100000 /"
b100000 0"
1F
#36
0F
#38
b10000001000 6
b10000001000 a
b10000001000 o
0Z
1\
b10000001000 <
b10000001000 L
b10000001000 `
0P
b10000110101000001110000000000001 &
b10000110101000001110000000000001 {
b10000110101000001110000000000001 3"
b0 _
b100100 2"
b101000 $
b101000 ."
b101000 1"
1(
b10100 )
b10100 *"
b11000 -
b11000 j
b11000 ("
b10 1
b10 i
b1111 9
b1111 t
b1 :
b1 d
b1 y
b101 3
b101 s
b11100 /
b11100 c
b11100 z
b100000 .
b100000 p
b100000 %"
b10001010000000000000000000000000 %
b10001010000000000000000000000000 M
b10001010000000000000000000000000 &"
b101 '
b101 !"
b101 #
b101 #"
b0 !
b0 $"
b1010000000000000000000000000 8
b1010000000000000000000000000 ""
b0 5
b0 q
b0 ~
b100100 0
b100100 |
b100100 /"
b100100 0"
1F
#40
b0 6
b0 a
b0 o
0F
1D
#42
1N
b10 S
b1010011000001000 <
b1010011000001000 L
b1010011000001000 `
1O
b11000100000010000000000000000001 &
b11000100000010000000000000000001 {
b11000100000010000000000000000001 3"
b10100 _
b101000 2"
b101100 $
b101100 ."
b101100 1"
b100100 .
b100100 p
b100100 %"
b10000110101000001110000000000001 %
b10000110101000001110000000000001 M
b10000110101000001110000000000001 &"
b11 '
b11 !"
b11 #
b11 #"
b1 !
b1 $"
b11 "
b11 }
b110101000001110000000000001 8
b110101000001110000000000001 ""
b1000001110000000000001 5
b1000001110000000000001 q
b1000001110000000000001 ~
b0 9
b0 t
b0 :
b0 d
b0 y
b0 3
b0 s
b100000 /
b100000 c
b100000 z
b11100 -
b11100 j
b11100 ("
02
b1 1
b1 i
b11000 )
b11000 *"
b101000 0
b101000 |
b101000 /"
b101000 0"
1F
#44
0F
#46
1[
1V
b0 S
0N
0O
b110001001100 <
b110001001100 L
b110001001100 `
1Q
b0 &
b0 {
b0 3"
b1 _
b11 ]
b101100 2"
b110000 $
b110000 ."
b110000 1"
0(
b11100 )
b11100 *"
b100000 -
b100000 j
b100000 ("
b0 1
b0 i
b1000001110000000000001 9
b1000001110000000000001 t
b100100 /
b100100 c
b100100 z
b101000 .
b101000 p
b101000 %"
b11000100000010000000000000000001 %
b11000100000010000000000000000001 M
b11000100000010000000000000000001 &"
b10 '
b10 !"
b10 #
b10 #"
b0 "
b0 }
b100000010000000000000000001 8
b100000010000000000000000001 ""
b10000000000000000001 5
b10000000000000000001 q
b10000000000000000001 ~
b101100 0
b101100 |
b101100 /"
b101100 0"
1F
#48
0F
#50
0Q
0R
0V
0\
b0 <
b0 L
b0 `
0[
b10010101111111111111111111110 &
b10010101111111111111111111110 {
b10010101111111111111111111110 3"
b110000 2"
b110100 $
b110100 ."
b110100 1"
b101100 .
b101100 p
b101100 %"
b0 %
b0 M
b0 &"
b0 '
b0 !"
b0 #
b0 #"
b0 !
b0 $"
b0 8
b0 ""
b0 5
b0 q
b0 ~
b10000000000000000001 9
b10000000000000000001 t
b101000 /
b101000 c
b101000 z
b100100 -
b100100 j
b100100 ("
b100000 )
b100000 *"
b110000 0
b110000 |
b110000 /"
b110000 0"
1F
#52
0F
